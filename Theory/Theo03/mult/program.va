#
# Hello World!
#
#	a simple picoVersat program
#
#   assign regC = {negative, overflow, {(`DATA_W-3){1'b0}}, carry};

#test carry
        ldi 1
        wrw R0
        ldi -1
        addi -1
        rdw RC
        and R0
        bneqi neg
        ldi 'c'
        wrw CPRT_BASE
        ldi '\n'
        wrw CPRT_BASE
        bneqi end


#test negative
neg     ldi 4
        wrw R0
        ldi -1
        addi -1
        rdw RC
        and R0
        bneqi ov
        ldi 'n'
        wrw CPRT_BASE
        ldi '\n'
        wrw CPRT_BASE
        bneqi end


#test overflow
ov      ldi 2
        wrw R0
        ldi 0xffff
        ldih 0x7fff
        wrw R1
        add R1
        rdw RC
        and R0
        bneqi pr
        ldi 'o'
        wrw CPRT_BASE
        ldi '\n'
        wrw CPRT_BASE
        bneqi end

# set R1 iterator
pr	ldi 15
	wrw R1

# set RB to point to first char
        ldi c0
	wrw RB

# read string from memory and write to char printer
loop 	rdwb
	rdwb            #need to read twice due to memory 1 cycle delay
	wrw CPRT_BASE
	rdw RB          #load pointer
	addi 1	        #increment by 1
	wrw RB          #store incremented pointer
	rdw R1          #load iterator
	bneqi loop      #go back to loop if non-zero, regA is decremented
	wrw R1          #stores back decremented iterator

#set value to send to LED
end	ldi 0xf
#	wrw LED_BASE

#write 16 followed by the numbers to the screen

            rdw barra0  #write a barra
            rdw barra0
            wrw CPRT_BASE

#    ldi 0x0f
#    wrw NPRT_BASE
    #wrw R1

    rdw a0
    rdw a0
    wrw NPRT_BASE
    wrw R0
#    wrw R1

    rdw cardinal
    rdw cardinal
    wrw CPRT_BASE

    rdw b0
    rdw b0
    wrw NPRT_BASE
#    sub one1
    wrw R2

    rdw barra0
    rdw barra0
    wrw CPRT_BASE

    ldi 0x0
    wrw R1
    rdw b0
    rdw b0
    beqi end2
    wrw R2

loop2 	rdw R1
	    rdw R1        #load the accumulated value

            add R0      #sum r0
            wrw R1      #store new accumulation

        #    wrw NPRT_BASE #write to screen



    	rdw R2
    	rdw R2          #load iterator
    	bneqi loop2      #go back to loop if non-zero, regA is decremented
    	wrw R2          #stores back decremented iterator


end2    rdw igual
        rdw igual
        wrw CPRT_BASE
        rdw R1
        rdw R1
        wrw NPRT_BASE

    wrw NPRT_BASE

#finish by writing to invalid address to activate trap
	wrw 0x7fff

# char ascii constants placed here

a0 .memset 0x0
   .memset 0x6

b0 .memset 0x0
   .memset 0x4

one1 .memset 0x0
    .memset 0x1
space0 .memset 0x0
       .memset ' '

barra0 .memset 0x0
       .memset '|'

cardinal .memset 0x0
        .memset '*'

igual .memset 0x0
      .memset '='
c0	.memset '\n'
	.memset 'h'
	.memset 'e'
	.memset 'l'
	.memset 'l'
	.memset 'o'
	.memset ' '
	.memset 'W'
	.memset 'o'
	.memset 'r'
	.memset 'l'
	.memset 'd'
	.memset '!'
	.memset '\n'
	.memset '\r'
	.memset '\n'
